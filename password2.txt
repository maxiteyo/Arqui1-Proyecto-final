_start:
    SUB R0,R15,R15
    ADD R1,R0,#0xFF          @ Cargar la contraseña en R1
    ADD R3,R0, #3            @ Cargar el contador de intentos en R3

enter_password:
    LDR R4, R3
    LDR R5, [R4]             @ Cargar el número máximo de intentos permitidos en R5
    SUBS R6, R5, R3          @ Restar el contador de intentos al número máximo permitido
    BEQ all_lights_on        @ Si los intentos agotados, encender todas las luces

    LDR R5, =0xFF            @ Máscara para todos los interruptores encendidos
    AND R7, R1, R5           @ Verificar si la contraseña es correcta
    ANDS R8, R7, R5          @ Actualizar las banderas después de la operación AND
    BNE wrong_password       @ Si la contraseña es incorrecta, saltar a la etiqueta wrong_password

    B menu                   @ Contraseña correcta, saltar al menú

wrong_password:
    ADD R3, R3, #1           @ Incrementar el contador de intentos
    STR R3, [R2]             @ Almacenar el nuevo valor del contador

    @ Apagar todas las luces y esperar un tiempo antes de volver a intentar
    LDR R9, =0x00
    STR R9, [LEDs]            @ Apagar todos los LEDs
    BL delay                  @ Esperar un tiempo
    B enter_password         @ Volver a intentar ingresar la contraseña

all_lights_on:
    LDR R9, =0xFF
    STR R9, [LEDs]            @ Encender todas las luces permanentemente

menu:
    @ Tu código para el menú va aquí

delay:
    @ Implementa una función de espera aquí, por ejemplo, un bucle de cuenta
    MOV R10, #10000
delay_loop:
    SUBS R10, R10, #1
    BNE delay_loop
    BX LR